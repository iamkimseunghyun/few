import { neon } from '@neondatabase/serverless';
import * as dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

async function main() {
  const DATABASE_URL = process.env.DATABASE_URL;
  if (!DATABASE_URL) {
    throw new Error('DATABASE_URL is not set');
  }

  const sql = neon(DATABASE_URL);

  console.log('üîç ÎπÑÎîîÏò§Í∞Ä Ìè¨Ìï®Îêú Î¶¨Î∑∞ Í≤ÄÏÉâ Ï§ë...');

  try {
    // ÎπÑÎîîÏò§Í∞Ä Ìè¨Ìï®Îêú Î¶¨Î∑∞ Ï∞æÍ∏∞
    const reviewsWithVideos = await sql`
      SELECT id, title, media_items
      FROM "reviews"
      WHERE media_items IS NOT NULL
        AND media_items::text != '[]'
        AND EXISTS (
          SELECT 1 
          FROM jsonb_array_elements(media_items) AS item
          WHERE item->>'type' = 'video'
        )
    `;
    
    if (reviewsWithVideos.length === 0) {
      console.log('‚ùå ÎπÑÎîîÏò§Í∞Ä Ìè¨Ìï®Îêú Î¶¨Î∑∞Í∞Ä ÏóÜÏäµÎãàÎã§.');
      
      // Î™®Îì† Î¶¨Î∑∞Ïùò media_items ÎÇ¥Ïö© ÌôïÏù∏
      const allReviews = await sql`
        SELECT id, title, media_items
        FROM "reviews"
        WHERE media_items IS NOT NULL
          AND media_items::text != '[]'
        ORDER BY created_at DESC
        LIMIT 5
      `;
      
      console.log('\nüìä ÏµúÍ∑º media_itemsÍ∞Ä ÏûàÎäî Î¶¨Î∑∞:');
      allReviews.forEach((review, index) => {
        console.log(`\n${index + 1}. ${review.title} (${review.id})`);
        console.log('   mediaItems:', JSON.stringify(review.media_items, null, 2));
      });
    } else {
      console.log(`\n‚úÖ ÎπÑÎîîÏò§Í∞Ä Ìè¨Ìï®Îêú Î¶¨Î∑∞ ${reviewsWithVideos.length}Í∞ú Î∞úÍ≤¨:`);
      reviewsWithVideos.forEach((review, index) => {
        console.log(`\n${index + 1}. ${review.title} (${review.id})`);
        console.log('   mediaItems:', JSON.stringify(review.media_items, null, 2));
      });
    }

  } catch (error) {
    console.error('‚ùå Error:', error);
    throw error;
  }
}

main().catch(console.error);